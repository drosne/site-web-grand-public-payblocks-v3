# R√®gles de d√©veloppement pour le projet Justice.cool - Approche orthodoxe

## ‚ö†Ô∏è PRINCIPE FONDAMENTAL : RESPECT STRICT DES ARCHITECTURES OFFICIELLES

### 1. Documentation obligatoire AVANT toute impl√©mentation
- **TOUJOURS** consulter la documentation officielle via Context7 AVANT d'√©crire du code
- Utiliser syst√©matiquement :
  1. `mcp_context7_resolve-library-id` avec le nom de la librairie
  2. `mcp_context7_get-library-docs` avec l'ID r√©solu pour obtenir la documentation compl√®te
- Ne JAMAIS deviner ou improviser : si quelque chose n'est pas clair, consulter la doc d'abord

### 2. Shadcn UI - Usage strictement officiel
- **TOUJOURS** installer les composants via la CLI officielle : `npx shadcn@latest add [component]`
- Ne JAMAIS modifier les fichiers de composants Shadcn directement dans `src/components/ui/`
- Utiliser les composants tels quels, avec leurs props et patterns officiels
- Pour la sidebar : utiliser exactement comme dans la documentation Shadcn UI
- Les classes CSS doivent √™tre d√©finies dans `@theme inline` avec format HSL pour Tailwind CSS v4
- Format : `--color-sidebar-accent: 240 4.8% 95.9%;` (sans wrapper `hsl()`)

### 3. Payblocks - Architecture respect√©e
- Suivre la structure Payblocks : `src/globals/`, `src/blocks/`, `src/components/ui/`
- Utiliser le syst√®me de blocs Payblocks pour le contenu
- Respecter les conventions Payblocks pour les globals (Header, Footer, etc.)
- Ne jamais contourner l'architecture Payblocks

### 4. Payload CMS - Conventions respect√©es
- Utiliser les patterns Payload CMS pour les collections, globals, et blocs
- Respecter le syst√®me de types Payload (`payload-types`)
- Utiliser l'API Payload correctement pour cr√©er/modifier les donn√©es

### 5. Int√©gration Sidebar - R√®gles strictes
- Utiliser `SidebarProvider` > `Sidebar` + `SidebarInset` comme siblings directs
- `Sidebar` avec `variant="inset"` et `collapsible="icon"`
- Utiliser `useSidebar` hook officiel pour l'√©tat
- `SidebarInset` doit avoir `ml-0` pour `variant="inset"` (g√©r√© par le spacer natif)
- Le spacer dans `Sidebar` calcule automatiquement l'espace pour `variant="inset"`
- AdminBar : `fixed top-0` avec `margin-left` conditionnel via s√©lecteurs `group-data-[collapsible=icon]`

### 6. CSS et Tailwind CSS v4
- Variables dans `@theme inline` : format HSL sans wrapper
- Tailwind g√©n√®re automatiquement les classes avec toutes les variantes (`hover:`, `active:`, etc.)
- Ne pas cr√©er de classes CSS manuelles sauf si absolument n√©cessaire

### 7. Structure de fichiers
- Ne jamais dupliquer les composants Shadcn
- Cr√©er des wrappers uniquement si n√©cessaire
- Garder la structure Payblocks intacte

### 8. Validation apr√®s chaque modification
- ‚úÖ Documentation officielle respect√©e ?
- ‚úÖ Styles hover fonctionnent ?
- ‚úÖ Responsive fonctionne ?
- ‚úÖ Collapse/expand fonctionne ?
- ‚úÖ AdminBar positionn√©e correctement ?
- ‚úÖ Pas de padding excessif ?

### 9. Commandes utiles
```bash
# Installation Shadcn
npx shadcn@latest add sidebar

# Acc√®s documentation Context7
# 1. R√©soudre l'ID : mcp_context7_resolve-library-id avec nom librairie
# 2. Obtenir doc : mcp_context7_get-library-docs avec ID r√©solu
```

### 10. R√©f√©rences de documentation
- **Shadcn UI Sidebar** : https://ui.shadcn.com/docs/components/sidebar
- **Payblocks** : Documentation via Context7 (`/payblocks/payblocks` ou similaire)
- **Payload CMS** : Documentation via Context7 (`/payloadcms/payload` ou similaire)

### 11. En cas de probl√®me
1. ‚ö†Ô∏è Arr√™ter imm√©diatement
2. üìö Consulter la documentation officielle via Context7
3. üîç V√©rifier les exemples dans la documentation
4. üÜö Comparer avec notre impl√©mentation
5. ‚ùå Ne JAMAIS "deviner" ou "bricoler"

## Code Style and Structure (h√©rit√©)
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

## UI and Styling
- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

## Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
